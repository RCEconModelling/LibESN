window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "libesn", "modulename": "libesn", "kind": "module", "doc": "<h1 id=\"what-is-libesn\">What is LibESN ?</h1>\n\n<p>An Echo State Network library for single and multi-frequency ESN (MFESN) forecasting.</p>\n\n<p>Currently we implement:</p>\n\n<ul>\n<li>ESN (single reservoir, single frequency):\n<ul>\n<li><code>ESN</code> class</li>\n<li>Ridge CV and fitting, with direct and iterated multistep fit methods</li>\n<li>Simple forecasting, with direct and iterated multistep forecasting methods</li>\n</ul></li>\n<li>MFESN (multiple reservoirs, multi-frequency):\n<ul>\n<li><code>MFESN</code> class</li>\n<li>Ridge CV and fitting, with high-frequency (nowcasting) fit methods</li>\n<li>Simple MF forecasting, with high-frequency nowcasting and forecasting methods</li>\n</ul></li>\n<li>Reservoir matrix generation utilities</li>\n</ul>\n\n<p>For more info, see the paper <em><a href=\"https://doi.org/10.1111/jtsa.12737\">Reservoir Computing for Macroeconomic Forecasting with Mixed Frequency Data</a></em>, \nits <a href=\"https://github.com/RCEconModelling/Reservoir-Computing-for-Macroeconomic-Modelling\">repository</a>.</p>\n\n<p><strong>NOTE:</strong> LibESN works best with <em>data in <code>pandas.DataFrame</code> format and \"datetime\" indexing</em>, especially when dealing with MFESN models.\nOur initial goal for LibESN was to make it easy to handle economic data sampled at multiple (yearly, quarterly, monthly, etc) frequencies.</p>\n\n<h1 id=\"example-notebooks\">Example Notebooks</h1>\n\n<p>To jump right into working code or to have an idea of how LibESN can be used in practice, we provide a few practical examples of the core functionality in the <code>examples</code> folder:</p>\n\n<ul>\n<li>Autonomous prediction of the Lorenz attractor (<a href=\"https://github.com/RCEconModelling/LibESN/blob/main/examples/example_lorenz.ipynb\">Jupyter Notebook</a>)</li>\n</ul>\n\n<h1 id=\"basic-usage\">Basic Usage</h1>\n\n<p>LibESN provides two main classes for working with ESN models, <code>ESN</code> and <code>MFESN</code>.</p>\n\n<ul>\n<li><code>ESN</code> constructs a simple (nonlinear) ESN model</li>\n<li><code>MFESN</code> constructs a multi-frequency, multi-reservoir MFESN model, see the references for more information.</li>\n</ul>\n\n<p>LibESN is designed with a focus on implementing <code>MFESN</code> models, which are able to integrate data of multiple frequencies/releases. These type of mixed-frequency models are commonly and widely used for economic forecasting and nowcasting.</p>\n\n<h2 id=\"creating-an-esn-model\">Creating an ESN model</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">libesn.matgen</span> <span class=\"kn\">import</span> <span class=\"n\">matrixGenerator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libesn.esn</span> <span class=\"kn\">import</span> <span class=\"n\">ESN</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">esn</span> <span class=\"o\">=</span> <span class=\"n\">ESN</span><span class=\"p\">(</span>\n    <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">smap</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tanh</span><span class=\"p\">,</span> \n    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">matrixGenerator</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">),</span> <span class=\"n\">dist</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">sparsity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">),</span> \n    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"n\">matrixGenerator</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">),</span> <span class=\"n\">dist</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">sparsity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">12345</span><span class=\"p\">),</span> \n    <span class=\"n\">zeta</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> \n    <span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> \n    <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n    <span class=\"n\">leak</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>ESN models consist of a <strong>state equation</strong> and a <strong>readout</strong>/<strong>regression equation</strong>, formally</p>\n\n<p>$$\n\\begin{aligned}\n    X_t &amp;= \\alpha X_{t-1} + (1 - \\alpha) \\sigma(\\rho A X_{t-1} + \\gamma C Z_t + \\zeta) \\\\\n    Y_{t} &amp;= W' X_t + \\eta_{t}\n\\end{aligned}\n$$</p>\n\n<p>The <code>matrixGenerator()</code> function allows us to draw random matrices from a set of commonly used (sparse) random and non-random distributions.</p>\n\n<h2 id=\"composing-a-multi-frequency-esn-model\">Composing a Multi-Frequency ESN model</h2>\n\n<p>MFESNs can be easily composed starting from individual <code>ESN</code> model objects:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">LibESN.mfesn</span> <span class=\"kn\">import</span> <span class=\"n\">MFESN</span>\n\n<span class=\"n\">mfesn</span> <span class=\"o\">=</span> <span class=\"n\">MFESN</span><span class=\"p\">((</span><span class=\"n\">esn_A</span><span class=\"p\">,</span> <span class=\"n\">esn_B</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h2 id=\"fitting\">Fitting</h2>\n\n<p>Fitting is easily done with both <code>ESN</code> and <code>MFESN</code> models. For example, we can use ridge regression with cross-validation to fit the MFESN model above:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">LibESN.mfesn_fit</span> <span class=\"kn\">import</span> <span class=\"n\">mfRidgeFit</span><span class=\"p\">,</span> <span class=\"n\">mfRidgeCV</span>\n\n<span class=\"n\">mfesn_simple</span> <span class=\"o\">=</span> <span class=\"n\">MFESN</span><span class=\"p\">((</span><span class=\"n\">esn_A</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n<span class=\"n\">mfcv</span> <span class=\"o\">=</span> <span class=\"n\">mfRidgeCV</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cvHighFreq</span><span class=\"p\">(</span>\n    <span class=\"n\">mfmodel</span><span class=\"o\">=</span><span class=\"n\">mfesn_simple</span><span class=\"p\">,</span>\n    <span class=\"n\">train_data</span><span class=\"o\">=</span><span class=\"p\">((</span><span class=\"n\">data_A_train</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"n\">data_Target_train</span><span class=\"p\">,),</span>\n    <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># CV at HF for both nowcast and 1-step-ahead</span>\n    <span class=\"n\">freqratio</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">min_train_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">Lambda</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">mfcv</span><span class=\"p\">[</span><span class=\"s1\">&#39;cvLambda&#39;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">mfcv</span><span class=\"p\">[</span><span class=\"s1\">&#39;cvLambda&#39;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">mfesn_fit</span> <span class=\"o\">=</span> <span class=\"n\">mfesn_simple</span><span class=\"o\">.</span><span class=\"n\">fitDirectHighFreq</span><span class=\"p\">(</span>\n    <span class=\"n\">train_data</span><span class=\"o\">=</span><span class=\"p\">((</span><span class=\"n\">data_A_train</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"n\">data_Target_train</span><span class=\"p\">,),</span> \n    <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">mfRidgeFit</span><span class=\"p\">(</span><span class=\"n\">Lambda_hf</span><span class=\"p\">),</span>\n    <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"n\">freqratio</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Note:</p>\n\n<ul>\n<li>We assume above that the data <code>data_A_train</code> is available in higher frequency compared to target in <code>data_Target_train</code></li>\n<li>The frequency ratio of inputs to targets must be set with option <code>freqratio</code>, and above we chose <code>freqratio=3</code>: this is case for examples when inputs are monthly series and targets are quarterly series</li>\n<li><code>cvHighFreq()</code> implements \"high frequency\" cross-validation, that is, it will cross-validate a specific ridge penalty (scalar) for each of high-frequency steps in the set $1, 2, ..., r$ where here $r =$<code>freqratio</code></li>\n<li>Option <code>steps=[0,1]</code> is used to validate and fit coefficients for both <em>nowcasting</em> (step 0) and 1-step-ahead <em>forecasting</em> (step 1)</li>\n<li>Function <code>fitDirectHighFreq()</code> handles fitting specific coefficient matrices for both the nowcasting and forecasting (1 step) setup. This means output <code>dhf_fit</code> will contain <code>len(steps)*freqratio</code> sets of coefficients</li>\n</ul>\n\n<h2 id=\"forecasting\">Forecasting</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">LibESN.mfesn_forecast</span> <span class=\"kn\">import</span> <span class=\"n\">mfDirectHighFreqForecast</span>\n\n<span class=\"n\">forecast</span> <span class=\"o\">=</span> <span class=\"n\">mfDirectHighFreqForecast</span><span class=\"p\">(</span>\n    <span class=\"n\">mfmodel</span><span class=\"o\">=</span><span class=\"n\">mfesn_simple</span><span class=\"p\">,</span>\n    <span class=\"n\">forecast_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">data_A_test</span><span class=\"p\">,),</span>\n    <span class=\"n\">fit</span><span class=\"o\">=</span><span class=\"n\">mfesn_fit</span><span class=\"p\">,</span>\n    <span class=\"n\">freqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;MS&#39;</span><span class=\"p\">,],</span> <span class=\"c1\"># monthly data</span>\n    <span class=\"n\">terminal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># only return forecast with most recent data</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"nowcasting\">Nowcasting</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">LibESN.mfesn_forecast</span> <span class=\"kn\">import</span> <span class=\"n\">mfNowcast</span>\n\n<span class=\"n\">nowcast</span> <span class=\"o\">=</span> <span class=\"n\">mfNowcast</span><span class=\"p\">(</span>\n    <span class=\"n\">mfmodel</span><span class=\"o\">=</span><span class=\"n\">mfesn_simple</span><span class=\"p\">,</span>\n    <span class=\"n\">nowcast_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">data_A_test</span><span class=\"p\">,),</span>\n    <span class=\"n\">fit</span><span class=\"o\">=</span><span class=\"n\">mfesn_fit</span><span class=\"p\">,</span>\n    <span class=\"n\">freqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;MS&#39;</span><span class=\"p\">,],</span> <span class=\"c1\"># monthly data</span>\n    <span class=\"n\">terminal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># only return forecast with most recent data</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "libesn.console", "modulename": "libesn.console", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.console.console", "modulename": "libesn.console", "qualname": "console", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;console width=211 None&gt;"}, {"fullname": "libesn.datasets", "modulename": "libesn.datasets", "kind": "module", "doc": "<p>Generate some basic datasets for testing.</p>\n"}, {"fullname": "libesn.datasets.mackey_glass", "modulename": "libesn.datasets", "qualname": "mackey_glass", "kind": "function", "doc": "<p>Simulate the Mackey-Glass equations.</p>\n\n<p>Parameters:\n    beta (float): Scaling factor.\n    gamma (float): Rate of decay.\n    tau (float): Time delay.\n    n (float): Nonlinearity parameter.\n    initial_condition (float): Initial condition for the system.\n    dt (float): Time step for the simulation.\n    total_time (float): Total time for the simulation.</p>\n\n<p>Returns:\n    numpy.ndarray: Array containing the simulated data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">beta</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">tau</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">initial_condition</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">total_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datasets.lorenz", "modulename": "libesn.datasets", "qualname": "lorenz", "kind": "function", "doc": "<p>Simulate the Lorenz attractor.</p>\n\n<p>Parameters:\n    sigma (float): Parameter controlling the behavior of the system.\n    rho (float): Parameter controlling the behavior of the system.\n    beta (float): Parameter controlling the behavior of the system.\n    initial_condition (numpy.ndarray): Initial condition for the system, shape (3,).\n    dt (float): Time step for the simulation.\n    total_time (float): Total time for the simulation.</p>\n\n<p>Returns:\n    numpy.ndarray: Array containing the simulated data, shape (num_steps, 3).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sigma</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">beta</span>, </span><span class=\"param\"><span class=\"n\">initial_condition</span>, </span><span class=\"param\"><span class=\"n\">dt</span>, </span><span class=\"param\"><span class=\"n\">total_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datautils", "modulename": "libesn.datautils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.datautils.pd_to_np_array", "modulename": "libesn.datautils", "qualname": "pd_to_np_array", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datautils.pd_data_prep", "modulename": "libesn.datautils", "qualname": "pd_data_prep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">V</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime", "modulename": "libesn.datetime", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.datetime.closest_past_date", "modulename": "libesn.datetime", "qualname": "closest_past_date", "kind": "function", "doc": "<p>list_date: collections of dates to compare.\nbase_date: reference date to compate to for closest match.\ncutoff: cutoff index to reduce search array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list_date</span>, </span><span class=\"param\"><span class=\"n\">base_date</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime.closest_future_date", "modulename": "libesn.datetime", "qualname": "closest_future_date", "kind": "function", "doc": "<p>list_date: collections of dates to compare.\nbase_date: reference date to compate to for closest match.\ncutoff: cutoff index to reduce search array.\nstrict: strict inequality in definition.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list_date</span>, </span><span class=\"param\"><span class=\"n\">base_date</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime.pd_infer_periods", "modulename": "libesn.datetime", "qualname": "pd_infer_periods", "kind": "function", "doc": "<p>freq : str pandas frequency alias.\nperiods : numeric, given freq, should create many years. \nscale: scale of years to group by (century = 100).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">freq</span>, </span><span class=\"param\"><span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime.pd_max_2freq", "modulename": "libesn.datetime", "qualname": "pd_max_2freq", "kind": "function", "doc": "<p>Find the maximum frequency between two pandas freq strings.\nf1 : frequency 1, str pandas frequency alias.\nf2 : frequency 2, str pandas frequency alias.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f1</span>, </span><span class=\"param\"><span class=\"n\">f2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime.pd_max_freq", "modulename": "libesn.datetime", "qualname": "pd_max_freq", "kind": "function", "doc": "<p>Find the maximum frequency in either a variable number of pandas frequency\nstrings or a list/tuple of freq. strings.\n*freqs: arguments or list/tuple</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">freqs</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime.pd_max_freq_dates", "modulename": "libesn.datetime", "qualname": "pd_max_freq_dates", "kind": "function", "doc": "<p>Find the dates (index) associated to the maximum frequency in either a \nvariable number of pandas frequency strings or a list/tuple of freq. strings.\n*dates: arguments or list/tuple</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dates</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.datetime.pd_min_freq_dates", "modulename": "libesn.datetime", "qualname": "pd_min_freq_dates", "kind": "function", "doc": "<p>Find the dates (index) associated to the minimum frequency in either a \nvariable number of pandas frequency strings or a list/tuple of freq. strings.\n*dates: arguments or list/tuple</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dates</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn", "modulename": "libesn.esn", "kind": "module", "doc": "<p>Main ESN model object class.</p>\n"}, {"fullname": "libesn.esn.stateParameters", "modulename": "libesn.esn", "qualname": "stateParameters", "kind": "class", "doc": "<p>Collection of state parameters for an ESN model.\nA <code>stateParameters</code> instance contains information regarding: the state map $\\sigma$;\nESN parameter matrices $A$, $C$ and $\\zeta$; ESN hyperparameters $\\rho$, $\\gamma$ and\nleak rate <code>leak</code>.</p>\n"}, {"fullname": "libesn.esn.stateParameters.__init__", "modulename": "libesn.esn", "qualname": "stateParameters.__init__", "kind": "function", "doc": "<p>Initialize the <code>stateParameters</code> instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">smap</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ufunc</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">zeta</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">leak</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "libesn.esn.stateParameters.size", "modulename": "libesn.esn", "qualname": "stateParameters.size", "kind": "variable", "doc": "<p>Number of ESN models in the collection, fixed to 1.</p>\n", "annotation": ": int"}, {"fullname": "libesn.esn.stateParameters.N", "modulename": "libesn.esn", "qualname": "stateParameters.N", "kind": "variable", "doc": "<p>State-space dimension.</p>\n", "annotation": ": int"}, {"fullname": "libesn.esn.stateParameters.K", "modulename": "libesn.esn", "qualname": "stateParameters.K", "kind": "variable", "doc": "<p>Input dimension.</p>\n", "annotation": ": int"}, {"fullname": "libesn.esn.stateParameters.smap", "modulename": "libesn.esn", "qualname": "stateParameters.smap", "kind": "variable", "doc": "<p>State map.</p>\n", "annotation": ": numpy.ufunc"}, {"fullname": "libesn.esn.stateParameters.A", "modulename": "libesn.esn", "qualname": "stateParameters.A", "kind": "variable", "doc": "<p>Reservoir (connectivity) matrix, must be of shape $N \\times N$.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "libesn.esn.stateParameters.C", "modulename": "libesn.esn", "qualname": "stateParameters.C", "kind": "variable", "doc": "<p>Reservoir input mask, must be of shape $N \\times K$.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "libesn.esn.stateParameters.zeta", "modulename": "libesn.esn", "qualname": "stateParameters.zeta", "kind": "variable", "doc": "<p>Reservoir input shift, must be of shape $N \\times 1$ or a 1D vector.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "libesn.esn.stateParameters.rho", "modulename": "libesn.esn", "qualname": "stateParameters.rho", "kind": "variable", "doc": "<p>Reservoir (connectivity) matrix spectral radius, $\\rho \\in [0, \\infty)$.</p>\n", "annotation": ": Union[int, float, numpy.ndarray]"}, {"fullname": "libesn.esn.stateParameters.gamma", "modulename": "libesn.esn", "qualname": "stateParameters.gamma", "kind": "variable", "doc": "<p>Reservoir input scaling, $\\gamma \\in (0, \\infty)$.</p>\n", "annotation": ": Union[int, float, numpy.ndarray]"}, {"fullname": "libesn.esn.stateParameters.leak", "modulename": "libesn.esn", "qualname": "stateParameters.leak", "kind": "variable", "doc": "<p>Reservoir leak rate, $\\alpha \\in [0, 1]$.</p>\n", "annotation": ": Union[int, float, numpy.ndarray]"}, {"fullname": "libesn.esn.stateParameters.table", "modulename": "libesn.esn", "qualname": "stateParameters.table", "kind": "function", "doc": "<p>Construct a <code>rich</code> table of the contents of the <code>stateParameters</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.stateParameters.print", "modulename": "libesn.esn", "qualname": "stateParameters.print", "kind": "function", "doc": "<p>Print <code>rich</code> table of contents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.ESN", "modulename": "libesn.esn", "qualname": "ESN", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "libesn.esn.ESN.__init__", "modulename": "libesn.esn", "qualname": "ESN.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pars</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">stateParameters</span>,</span><span class=\"param\">\t<span class=\"n\">smap</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ufunc</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zeta</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">leak</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "libesn.esn.ESN.pars", "modulename": "libesn.esn", "qualname": "ESN.pars", "kind": "variable", "doc": "<p>State parameters object, either passed as <code>pars</code> argument or constructed from other arguments.</p>\n", "annotation": ": libesn.esn.stateParameters"}, {"fullname": "libesn.esn.ESN.N", "modulename": "libesn.esn", "qualname": "ESN.N", "kind": "variable", "doc": "<p>Short-hand: state-space dimension (automatically extracted from <code>pars</code>).</p>\n", "annotation": ": int"}, {"fullname": "libesn.esn.ESN.K", "modulename": "libesn.esn", "qualname": "ESN.K", "kind": "variable", "doc": "<p>Short-hand: input dimension (automatically extracted from <code>pars</code>).</p>\n", "annotation": ": int"}, {"fullname": "libesn.esn.ESN.setup", "modulename": "libesn.esn", "qualname": "ESN.setup", "kind": "function", "doc": "<p>Generate ESN parameters from dictionaries describing reservoir matrix shapes,\nnormalizations and distributions as well as hyperparameters.</p>\n\n<ul>\n<li><code>A</code> and <code>C</code> must be dictionaries with keys <code>shape</code>, <code>dist</code>, <code>sparsity</code>, <code>normalize</code> and <code>options</code>.</li>\n<li><code>zeta</code> is optional, can be either <code>None</code> <em>or</em> a dictionary with the same keys \nas <code>A</code> and <code>C</code>.</li>\n<li><code>rho</code>, <code>gamma</code> and <code>leak</code> are optional. Defaults are 0, 1 and 0 respectively.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">zeta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">leak</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.ESN.states", "modulename": "libesn.esn", "qualname": "ESN.states", "kind": "function", "doc": "<p>Collect ESN states from input data. Optional arguments include:</p>\n\n<ul>\n<li><code>init</code> : initial state, defaults to <code>None</code> (i.e. zero initial state conditions).</li>\n<li><code>burnin</code> : number of burn-in periods, defaults to 0 (i.e. no states are discarded).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.ESN.fit", "modulename": "libesn.esn", "qualname": "ESN.fit", "kind": "function", "doc": "<p>Fit the ESN model to training data using a specified fitting method. </p>\n\n<p>This is a short-hand for calling <code>method.fit(model=self, train_data=train_data, **kwargs)</code>:</p>\n\n<ul>\n<li><code>train_data</code> : training data, can be a <code>pandas</code> DataFrame or a <code>numpy</code> array.</li>\n<li><code>method</code> : fitting method, must be an instance of <code>libesn.esn_fit.esnFitMethod</code> \nimplementing a <code>fit()</code> method.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.ESN.fitMultistep", "modulename": "libesn.esn", "qualname": "ESN.fitMultistep", "kind": "function", "doc": "<p>Fit the ESN model to training data using a specified <em>multistep</em> fitting method.</p>\n\n<p><code>fitMultistep()</code> is used to train the ESN to predict multiple steps ahead in <strong>autonomous</strong> mode,\nmeaning that for all prediction steps $&gt; 1$ the ESN state equation is run forward in time\nand the output is fed back as input. This requires estimating auxiliary coefficients \n$W_{\\textnormal{ar}}$, following equation</p>\n\n<p>$$\n\\begin{aligned}\n    X_t &amp;= \\alpha X_{t-1} + (1 - \\alpha) \\sigma(\\rho A X_{t-1} + \\gamma C Z_t + \\zeta) \\\\\n    Z_{t+1} &amp;= W_{\\textnormal{ar}}' X_t + \\eta_{t+1}\n\\end{aligned}\n$$</p>\n\n<p>so that the ESN can be run autonomously even when the output data is not a shift of the input data.</p>\n\n<p>This is a short-hand for calling <code>method.fit(model=self, train_data=train_data, **kwargs)</code>:</p>\n\n<ul>\n<li><code>train_data</code> : training data, can be a <code>pandas</code> DataFrame or a <code>numpy</code> array.</li>\n<li><code>method</code> : fitting method, must be an instance of <code>libesn.esn_fit.esnFitMethod</code> \nimplementing a <code>fitMultistep()</code> method.</li>\n<li><code>steps</code> : number of steps ahead to predict when fitting.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.ESN.fitDirectMultistep", "modulename": "libesn.esn", "qualname": "ESN.fitDirectMultistep", "kind": "function", "doc": "<p>Fit the ESN model to training data using a specified <em>multistep</em> fitting method. </p>\n\n<p><code>fitDirectMultistep()</code> is used to train the ESN to predict multiple steps ahead in <strong>direct</strong> mode,\nmeaning that for all prediction steps $\\geq 1$ a step (prediction horizon) specific coefficient matrix\nis estimated, following equation</p>\n\n<p>$$\n\\begin{aligned}\n    X_t &amp;= \\alpha X_{t-1} + (1 - \\alpha) \\sigma(\\rho A X_{t-1} + \\gamma C Z_t + \\zeta) \\\\\n    Z_{t+s} &amp;= W_{s}' X_t + \\eta_{t+s}\n\\end{aligned}\n$$</p>\n\n<p>where $s = 1, \\ldots, \\textnormal{steps}$ and $\\{ W_{s} \\}_{s=1}^{\\textnormal{steps}}$ are the\nstep-specific coefficient matrices.</p>\n\n<p>This is a short-hand for calling <code>method.fit(model=self, train_data=train_data, **kwargs)</code>:</p>\n\n<ul>\n<li><code>train_data</code> : training data, can be a <code>pandas</code> DataFrame or a <code>numpy</code> array.</li>\n<li><code>method</code> : fitting method, must be an instance of <code>libesn.esn_fit.esnFitMethod</code> \nimplementing a <code>fitMultistep()</code> method.</li>\n<li><code>steps</code> : number of steps ahead to predict when fitting.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn.ESN.print", "modulename": "libesn.esn", "qualname": "ESN.print", "kind": "function", "doc": "<p>Print the contents of the <code>pars</code> object of the ESN model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit", "modulename": "libesn.esn_fit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_fit.esnFitMethod", "modulename": "libesn.esn_fit", "qualname": "esnFitMethod", "kind": "class", "doc": "<p>Prototype for fitting methods for ESN models.</p>\n"}, {"fullname": "libesn.esn_fit.esnFitMethod.fit", "modulename": "libesn.esn_fit", "qualname": "esnFitMethod.fit", "kind": "function", "doc": "<p>Fit an ESN model to training data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.esnFitMethod.fitMultistep", "modulename": "libesn.esn_fit", "qualname": "esnFitMethod.fitMultistep", "kind": "function", "doc": "<p>Fit an ESN model to training data using an <strong>autonomous</strong> multistep approach.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.esnFitMethod.fitDirectMultistep", "modulename": "libesn.esn_fit", "qualname": "esnFitMethod.fitDirectMultistep", "kind": "function", "doc": "<p>Fit an ESN model to training data using a <strong>direct</strong> multistep approach.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridgeFit", "modulename": "libesn.esn_fit", "qualname": "ridgeFit", "kind": "class", "doc": "<p>Ridge regression.</p>\n", "bases": "esnFitMethod"}, {"fullname": "libesn.esn_fit.ridgeFit.__init__", "modulename": "libesn.esn_fit", "qualname": "ridgeFit.__init__", "kind": "function", "doc": "<p>Initialize the ridge regression method with penalty <code>Lambda</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Lambda</span></span>)</span>"}, {"fullname": "libesn.esn_fit.ridgeFit.Lambda", "modulename": "libesn.esn_fit", "qualname": "ridgeFit.Lambda", "kind": "variable", "doc": "<p>Ridge penalty. Can be a scalar, a vector or a matrix. \nIf a vector, it must have length $N$, equal tot the number of states in the ESN model. \nIf a matrix, it must be square and have the shape $N \\times N$.</p>\n", "annotation": ": Union[float, numpy.ndarray]"}, {"fullname": "libesn.esn_fit.ridgeFit.fit", "modulename": "libesn.esn_fit", "qualname": "ridgeFit.fit", "kind": "function", "doc": "<p>Fit an ESN model to training data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridgeFit.fitMultistep", "modulename": "libesn.esn_fit", "qualname": "ridgeFit.fitMultistep", "kind": "function", "doc": "<p>Fit an ESN model to training data using an <strong>autonomous</strong> multistep approach.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridgeFit.fitDirectMultistep", "modulename": "libesn.esn_fit", "qualname": "ridgeFit.fitDirectMultistep", "kind": "function", "doc": "<p>Fit an ESN model to training data using a <strong>direct</strong> multistep approach.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridge_penalty_check", "modulename": "libesn.esn_fit", "qualname": "ridge_penalty_check", "kind": "function", "doc": "<p>Check if the ridge penalty -- scalar, vector or matrix -- is nonnegative.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">L</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridge", "modulename": "libesn.esn_fit", "qualname": "ridge", "kind": "function", "doc": "<p>Ridge regression. Will yield a matrix <code>W</code> of estimated regression coefficients.\nNote that this model adapts to the shape of the input Lambda.</p>\n\n<p>Assume that <code>X</code> is a $T \\times N$ state matrix, where $T$ is the sample size, and \n<code>Y</code> is a $T \\times M$ matrix of targets/outputs, for $M \\geq 1$. \nThe following cases are supported:</p>\n\n<ul>\n<li>If <code>Lambda</code> is a scalar,\n$$ \\tilde{W} = \\left(\\frac{X' X}{T} + \\textnormal{Lambda} * I \\right)^{-1} \\frac{X' Y}{T} $$</li>\n<li>If <code>Lambda</code> is a vector of length $N$,\n$$ \\tilde{W} = \\left(\\frac{X' X}{T} + \\textnormal{diag}(\\textnormal{Lambda}) \\right)^{-1} \\frac{X' Y}{T} $$</li>\n<li>If <code>Lambda</code> is a $N \\times N$ matrix,\n$$ \\tilde{W} = \\left(\\frac{X' X}{T} + \\textnormal{Lambda} \\right)^{-1} \\frac{X' Y}{T} $$</li>\n</ul>\n\n<p>Finally, the intercept term is estimated as:\n$$ a = \\bar{Y} - W' \\bar{X} $$\nwhere $\\bar{Y}$ and $\\bar{X}$ are the column-wise means of <code>Y</code> and <code>X</code> (i.e. sample averages), respectively.</p>\n\n<p>The output <code>W</code> is a $(N+1) \\times M$ matrix given by $W := (a, \\tilde{W})$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Lambda</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.jit_ridge", "modulename": "libesn.esn_fit", "qualname": "jit_ridge", "kind": "function", "doc": "<p>JIT-compiled ridge regression. Will yield a matrix <code>W</code> of estimated regression coefficients.</p>\n\n<p>Note that this function only supports the case where <code>Lambda</code> is a scalar.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridgeCV", "modulename": "libesn.esn_fit", "qualname": "ridgeCV", "kind": "class", "doc": "<p>Cross-validation for ridge regression fit.</p>\n"}, {"fullname": "libesn.esn_fit.ridgeCV.cv", "modulename": "libesn.esn_fit", "qualname": "ridgeCV.cv", "kind": "function", "doc": "<p>Cross-validation to estimate the ridge penalty for <strong>single multistep</strong> ridge fit. \nThe CV folds are contructed using <code>libesn.validation.ShiftTimeSeriesSplit</code>.</p>\n\n<ul>\n<li><code>model</code>: ESN model.</li>\n<li><code>train_data</code>: tuple or list of training data, where the first element is the input data \nand the second element is the target data.</li>\n<li><code>step</code>: integer, step (prediction horizon) for the ridge fit. Default is 1.</li>\n</ul>\n\n<p>Optional keyword arguments:</p>\n\n<ul>\n<li><code>test_size</code>: float, size of the test split. Default is 1.</li>\n<li><code>min_train_size</code>: integer, <em>minimum</em> size of the training split. Default is 1.</li>\n<li><code>max_train_size</code>: integer, <em>maximum</em> size of the training split. Default is None.</li>\n<li><code>overlap</code>: boolean, whether to allow overlap between training and test splits\nwhen the cross-validation folds are built. Default is <code>False</code>.</li>\n</ul>\n\n<p>See <code>libesn.esn_fit.ridgeFit</code> for additional keyword arguments <code>init</code> and <code>burnin</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.ridgeCV.cvDirectMultistep", "modulename": "libesn.esn_fit", "qualname": "ridgeCV.cvDirectMultistep", "kind": "function", "doc": "<p>Cross-validation to estimate the ridge penalty for <strong>direct multi-step</strong> ridge fit. \nThis function is similar to <code>libesn.esn_fit.ridgeCV.cv</code>, but it estimates a penalty\n<em>for each step</em> $s = 1, \\ldots, \\textnormal{steps}$ sequentially.\nThe CV folds are contructed using <code>libesn.validation.ShiftTimeSeriesSplit</code>.</p>\n\n<ul>\n<li><code>model</code>: ESN model.</li>\n<li><code>train_data</code>: tuple or list of training data, where the first element is the input data \nand the second element is the target data.</li>\n<li><code>step</code>: integer, step (prediction horizon) for the ridge fit. Default is 1.</li>\n</ul>\n\n<p>Optional keyword arguments:</p>\n\n<ul>\n<li><code>test_size</code>: float, size of the test split. Default is 1.</li>\n<li><code>min_train_size</code>: integer, <em>minimum</em> size of the training split. Default is 1.</li>\n<li><code>max_train_size</code>: integer, <em>maximum</em> size of the training split. Default is None.</li>\n<li><code>overlap</code>: boolean, whether to allow overlap between training and test splits\nwhen the cross-validation folds are built. Default is <code>False</code>.</li>\n</ul>\n\n<p>See <code>libesn.esn_fit.ridgeFit</code> for additional keyword arguments <code>init</code> and <code>burnin</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.qpFit", "modulename": "libesn.esn_fit", "qualname": "qpFit", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_fit.qpFit.__init__", "modulename": "libesn.esn_fit", "qualname": "qpFit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "libesn.esn_fit.qpFit.G", "modulename": "libesn.esn_fit", "qualname": "qpFit.G", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_fit.qpFit.h", "modulename": "libesn.esn_fit", "qualname": "qpFit.h", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_fit.qpFit.A", "modulename": "libesn.esn_fit", "qualname": "qpFit.A", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_fit.qpFit.b", "modulename": "libesn.esn_fit", "qualname": "qpFit.b", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_fit.qpFit.fit", "modulename": "libesn.esn_fit", "qualname": "qpFit.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_fit.qp", "modulename": "libesn.esn_fit", "qualname": "qp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">G</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">A</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_forecast", "modulename": "libesn.esn_forecast", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_forecast.forecast", "modulename": "libesn.esn_forecast", "qualname": "forecast", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>, </span><span class=\"param\"><span class=\"n\">forecast_data</span>, </span><span class=\"param\"><span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_forecast.autonomousForecast", "modulename": "libesn.esn_forecast", "qualname": "autonomousForecast", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>, </span><span class=\"param\"><span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_forecast.forecastMultistep", "modulename": "libesn.esn_forecast", "qualname": "forecastMultistep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>, </span><span class=\"param\"><span class=\"n\">forecast_data</span>, </span><span class=\"param\"><span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_forecast.forecastDirectMultistep", "modulename": "libesn.esn_forecast", "qualname": "forecastDirectMultistep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">esn</span><span class=\"o\">.</span><span class=\"n\">ESN</span>, </span><span class=\"param\"><span class=\"n\">forecast_data</span>, </span><span class=\"param\"><span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states", "modulename": "libesn.esn_states", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.esn_states.states", "modulename": "libesn.esn_states", "qualname": "states", "kind": "function", "doc": "<p>Collects the states of an ESN model given an input and the model's parameters.</p>\n\n<ul>\n<li><code>input</code>: np.ndarray, matrix of input data of shape $T \\times K$, where $T \\geq 1$ is \nthe sample size and $K \\geq 1$ is the number of input features/covariates.</li>\n<li><code>map</code>: function, activation function to apply to the model's states.</li>\n<li><code>A</code>: np.ndarray, matrix of shape $N \\times N$.</li>\n<li><code>C</code>: np.ndarray, matrix of shape $N \\times K$.</li>\n<li><code>zeta</code>: np.ndarray, vector of shape $N \\times 1$.</li>\n<li><code>rho</code>: float, reservoir (connectivity) matrix spectral radius, $\\rho \\in [0, \\infty)$.</li>\n<li><code>gamma</code>: float, reservoir input scaling, $\\gamma \\in (0, \\infty)$.</li>\n<li><code>leak</code>: float, reservoir leak rate, $\\alpha \\in [0, 1]$.</li>\n<li><code>init</code>: np.ndarray, initial state. Default is <code>None</code>, equivalent to setting <code>init</code> \nequal to a $N$-dimensional zero vector.</li>\n</ul>\n\n<p>Supposing <code>input</code> is a $T \\times K$ matrix and that <code>map</code> is a valid element-wise function \n$\\sigma : \\mathbb{R} \\to \\mathbb{R}$ (e.g. a <code>np.ufunc</code>), state collection is performed by \niterating the following equation:</p>\n\n<p>$$ X_t = \\alpha X_{t-1} + (1 - \\alpha) \\sigma(\\rho A X_{t-1} + \\gamma C Z_t + \\zeta) $$</p>\n\n<p>where $t \\in 1, \\ldots, T$ and $X_0 =$<code>init</code>. </p>\n\n<p>This final output is a matrix <code>states</code>$= (X_1, \\ldots, X_T)$ of shape $T \\times N$.</p>\n\n<p>This function will call a specific implementation based on <code>map</code>:   </p>\n\n<ul>\n<li>If <code>map</code> is <code>np.tanh</code>, the states will be collected using JIT-compiled <code>nb_collect_states_tanh</code>.</li>\n<li>If <code>map</code> is <code>libesn.ufuncs.identity</code> or <code>libesn.base_functions.nb_identity</code>, the states \nwill be collected using JIT-compiled <code>nb_collect_states_linear</code>.</li>\n<li>If <code>map</code> is another generic function, the states will be collected using <code>collect_states</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"nb\">map</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">leak</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.collect_states", "modulename": "libesn.esn_states", "qualname": "collect_states", "kind": "function", "doc": "<p>Collects the states of an ESN model given an input and the model's parameters, \nsee <code>states</code> function above for details.</p>\n\n<p>Generic reference implementation of the state collection equation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"nb\">map</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">leak</span>, </span><span class=\"param\"><span class=\"n\">init</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.nb_collect_states_tanh", "modulename": "libesn.esn_states", "qualname": "nb_collect_states_tanh", "kind": "function", "doc": "<p>Collects the states of an ESN model given an input and the model's parameters, \nsee <code>states</code> function above for details.</p>\n\n<p>This is a JIT-compiled version of <code>collect_states</code> using <code>np.tanh</code> as the activation function:</p>\n\n<p>$$ X_t = \\alpha X_{t-1} + (1 - \\alpha) \\textnormal{tanh}(\\rho A X_{t-1} + \\gamma C Z_t + \\zeta) $$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">leak</span>, </span><span class=\"param\"><span class=\"n\">init</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.nb_collect_states_linear", "modulename": "libesn.esn_states", "qualname": "nb_collect_states_linear", "kind": "function", "doc": "<p>Collects the states of an ESN model given an input and the model's parameters, \nsee <code>states</code> function above for details.</p>\n\n<p>This is a JIT-compiled version of <code>collect_states</code> using identity as the activation function:</p>\n\n<p>$$ X_t = \\alpha X_{t-1} + (1 - \\alpha) (\\rho A X_{t-1} + \\gamma C Z_t + \\zeta) $$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">C</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">leak</span>, </span><span class=\"param\"><span class=\"n\">init</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.generate", "modulename": "libesn.esn_states", "qualname": "generate", "kind": "function", "doc": "<p>Iterates forward the states of an ESN model given a matrix of collected states,\na matrix of autonomous output coefficients and the model's parameters.</p>\n\n<ul>\n<li><code>states</code>: np.ndarray, matrix of input data of shape $T \\times N$, where $T \\geq 1$ is \nthe state sample size and $N \\geq 1$ is the size of the state space.</li>\n<li><code>length</code>: int, length of the state iteration, $\\textnormal{length} \\geq 1$.</li>\n<li><code>W</code>: np.ndarray, matrix of shape $N \\times K$ of autonomous output coefficients.</li>\n<li><code>map</code>: function, activation function to apply to the model's states.</li>\n<li><code>A</code>: np.ndarray, matrix of shape $N \\times N$.</li>\n<li><code>C</code>: np.ndarray, matrix of shape $N \\times K$.</li>\n<li><code>zeta</code>: np.ndarray, vector of shape $N \\times 1$.</li>\n<li><code>rho</code>: float, reservoir (connectivity) matrix spectral radius, $\\rho \\in [0, \\infty)$.</li>\n<li><code>gamma</code>: float, reservoir input scaling, $\\gamma \\in (0, \\infty)$.</li>\n<li><code>leak</code>: float, reservoir leak rate, $\\alpha \\in [0, 1]$.</li>\n<li><code>start</code>: int, index to start state iteration from, must be $0 \\leq \\textnormal{start} &lt; T$. Default is <code>0</code>.</li>\n<li><code>stride</code>: int, stride for state iteration, must be $\\textnormal{stride} \\geq 1$. Default is <code>1</code>.</li>\n<li><code>states_slice</code>: tuple, list or range of indices to iterate. Default is <code>None</code>. </li>\n</ul>\n\n<p>This method will iterate all states indexed by <code>states_slice</code>.\nWhen argument <code>states_slice</code> is <code>None</code>, the index will be set to <code>states_slice = range(start, T, stride)</code>.</p>\n\n<p>Input states are supplied in matrix <code>states</code>$= X_t$ of shape $T \\times N$. For each $t$ in <code>states_slice</code>\nthe state iteration is performed by iterating the following equation:</p>\n\n<p>$$ X_{t+h} = \\alpha X_{t+h-1} + (1 - \\alpha) \\sigma(\\rho A X_{t+h-1} + \\gamma C W' X_{t+h-1} + \\zeta) $$</p>\n\n<p>where $h = 1, \\ldots, \\textnormal{length}$. This will yield a matrix $X_{t:t+h} := (X_{t+1}, \\ldots, X_{t+h})$ \nof shape $h \\times N$ for each $t$. </p>\n\n<p>The final output is a 3D tensor of shape <code>len(states_slice)</code>$\\times N \\times \\textnormal{length}$, where \nmatrices $X_{t:t+h}$ are stacked along the first dimension.</p>\n\n<p>This function will call a specific implementation based on <code>map</code>:   </p>\n\n<ul>\n<li>If <code>map</code> is <code>np.tanh</code>, the states will be collected using JIT-compiled <code>nb_iterate_state_tanh</code>.</li>\n<li>If <code>map</code> is <code>libesn.ufuncs.identity</code> or <code>libesn.ufuncs.nb_identity</code>, the states \nwill be collected using JIT-compiled <code>nb_iterate_state_linear</code>.</li>\n<li>If <code>map</code> is another generic function, the states will be collected using <code>iterate_state</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">states</span>,</span><span class=\"param\">\t<span class=\"n\">length</span>,</span><span class=\"param\">\t<span class=\"n\">W</span>,</span><span class=\"param\">\t<span class=\"nb\">map</span>,</span><span class=\"param\">\t<span class=\"n\">A</span>,</span><span class=\"param\">\t<span class=\"n\">C</span>,</span><span class=\"param\">\t<span class=\"n\">zeta</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">leak</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">states_slice</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.iter_state", "modulename": "libesn.esn_states", "qualname": "iter_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"nb\">map</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">leak</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.iterate_state", "modulename": "libesn.esn_states", "qualname": "iterate_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"nb\">map</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">leak</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.nb_iterate_state_tanh", "modulename": "libesn.esn_states", "qualname": "nb_iterate_state_tanh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">leak</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.esn_states.nb_iterate_state_linear", "modulename": "libesn.esn_states", "qualname": "nb_iterate_state_linear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">zeta</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">gamma</span>, </span><span class=\"param\"><span class=\"n\">leak</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.matgen", "modulename": "libesn.matgen", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.matgen.matrixGenerator", "modulename": "libesn.matgen", "qualname": "matrixGenerator", "kind": "function", "doc": "<p>Function to generate (random) matrices (e.g. state matrix A, input mask C)\naccording to commonly used entry-wise or matrix-wise distributions.</p>\n\n<p>The required arguments are:</p>\n\n<ul>\n<li><code>shape</code> : tuple, dimensions of the matrix to generate. Currently, this is checked\nto be a 2-entry <code>list</code> or <code>tuple</code>, meaning <code>matrixGenerator()</code> will return\na 2D matrix.</li>\n<li><code>dist</code>: type of matrix to generate. Currently we implement entry-wise <code>'normal'</code> (Gaussian) and\n<code>'uniform'</code> distributions, as well as <code>'orthogonal'</code>, <code>'takens'</code>, <code>'takens_exp'</code> (exponential\nTakens) and <code>'takens_augment'</code> (augmented Takens) matrix forms.</li>\n</ul>\n\n<p>Optional <code>kwargs</code>:</p>\n\n<ul>\n<li><code>sparsity</code> : degree of sparsity of the generated matrix. <strong>Note that</strong> <code>sparsity</code> is implemented\nusing a sparsity mask generated with <code>rng.binomial(n=1, p=sparsity, size=shape)</code>:\ntherefore, <code>sparsity = 1.0</code> implies a generally <em>fully dense</em> output. \nIgnored if <code>dist</code> is not an entry-wise matrix distribution</li>\n<li><code>normalize</code> : normalization to apply to the matrix:\n<ul>\n<li><code>'eigen'</code> / <code>'eig'</code> :            maximum absolute eigenvalue</li>\n<li><code>'sv'</code> :                        maximum singular value</li>\n<li><code>'norm2'</code> :                     spectral (L2) norm</li>\n<li><code>'max'</code> / <code>'normS'</code> :            infinity (sup) norm  </li>\n<li><code>'fro'</code> :                       Frobenius norm       </li>\n</ul></li>\n</ul>\n\n<p>Arguments <code>sparsity</code> and <code>normalize</code> are ignored if <code>dist</code> is not an entry-wise matrix distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">dist</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn", "modulename": "libesn.mfesn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN", "modulename": "libesn.mfesn", "qualname": "MFESN", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.__init__", "modulename": "libesn.mfesn", "qualname": "MFESN.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">states_join</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;align&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">states_lags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "libesn.mfesn.MFESN.models", "modulename": "libesn.mfesn", "qualname": "MFESN.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.states_join", "modulename": "libesn.mfesn", "qualname": "MFESN.states_join", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.states_lags", "modulename": "libesn.mfesn", "qualname": "MFESN.states_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.size", "modulename": "libesn.mfesn", "qualname": "MFESN.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.N", "modulename": "libesn.mfesn", "qualname": "MFESN.N", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.K", "modulename": "libesn.mfesn", "qualname": "MFESN.K", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.M", "modulename": "libesn.mfesn", "qualname": "MFESN.M", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn.MFESN.fit", "modulename": "libesn.mfesn", "qualname": "MFESN.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn.MFESN.fitMultistep", "modulename": "libesn.mfesn", "qualname": "MFESN.fitMultistep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn.MFESN.fitDirectMultistep", "modulename": "libesn.mfesn", "qualname": "MFESN.fitDirectMultistep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn.MFESN.fitDirectHighFreq", "modulename": "libesn.mfesn", "qualname": "MFESN.fitDirectHighFreq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_data</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn.MFESN.print", "modulename": "libesn.mfesn", "qualname": "MFESN.print", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit", "modulename": "libesn.mfesn_fit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit.__init__", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Lambda</span></span>)</span>"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit.Lambda", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit.Lambda", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit.fit", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">full</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit.fitMultistep", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit.fitMultistep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit.fitDirectMultistep", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit.fitDirectMultistep", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.mfRidgeFit.fitDirectHighFreq", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeFit.fitDirectHighFreq", "kind": "function", "doc": "<p>Fit MFESN using direct regressions at fixed high-frequency steps over\neach low-frequency interval. This is explicitly designed for nowcasting\nas the targets used are always the closest LF future observations (w.r.t\ncurrent HF time).\nmfmodel: MFESN model.\ntrain_data: fitting dataset.\nfreqratio: fixed integer ratio of HF to LF observations. \nsteps: number of fit steps. Default is s=0 because unline in the low-freq.\n       setup, HF regressors can be observed at distance of less than 1\n       LF interval from the target c.f. nowcasting.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">freqratio</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.mfRidgeCV", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeCV", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn_fit.mfRidgeCV.cv", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeCV.cv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.mfRidgeCV.cvHighFreq", "modulename": "libesn.mfesn_fit", "qualname": "mfRidgeCV.cvHighFreq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">freqratio</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.mfridge", "modulename": "libesn.mfesn_fit", "qualname": "mfridge", "kind": "function", "doc": "<p>Ridge regression for a multi-frequency setup i.e. if N is a \nlist of dimensions, and Lambda and N have the same length, then\nthe final penalty is given by diag(kron(Lambda, rep(1, N)))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Lambda</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_fit.jit_kron_mfridge", "modulename": "libesn.mfesn_fit", "qualname": "jit_kron_mfridge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Lambda</span>, </span><span class=\"param\"><span class=\"n\">N</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_forecast", "modulename": "libesn.mfesn_forecast", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn_forecast.mfForecast", "modulename": "libesn.mfesn_forecast", "qualname": "mfForecast", "kind": "function", "doc": "<p>Forecast using MFESN model.\nmfmodel: MFESN class model to forecast with.\nforecast_data: dataset of regressors to use for forecasting.\nfit: MFESN fit that contains parameter matrix W.\nref_dates: slicing dates for states collected with forecast_data. \n           If not set, the function will try to slice align states \n           according to lowest-frequency input data in forecast_data.\nstack_init: optionally stack init values when making forecast.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">forecast_data</span>,</span><span class=\"param\">\t<span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">ref_dates</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stack_init</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_forecast.mfDirectHighFreqForecast", "modulename": "libesn.mfesn_forecast", "qualname": "mfDirectHighFreqForecast", "kind": "function", "doc": "<p>Forecast using MFESN model at high frequency.\nmfmodel: MFESN class model to forecast with.\nforecast_data: dataset of regressors to use for forecasting.\nfit: MFESN fit that contains parameter matrix W.\nref_dates: slicing dates for states collected with forecast_data. \n           If not set, the function will try to slice align states \n           according to lowest-frequency input data in forecast_data.\nstack_init: optionally stack init values when making forecast.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">forecast_data</span>,</span><span class=\"param\">\t<span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_forecast.mfNowcast", "modulename": "libesn.mfesn_forecast", "qualname": "mfNowcast", "kind": "function", "doc": "<p>Nowcast using MFESN model.\nmfmodel: MFESN class model to forecast with.\nnowcast_data: dataset of regressors to use for nowcasting.\nfit: MFESN fit that contains parameter matrix W.\n     If fit was produced by fitDirectHighFreq(), correctly\n     use the high-frequency W's fits based on frequency ratio\nfreqs: pandas string for frequency of observations of regressors\n       in nowcast_data\nterminal: if True, produce only a nowcast for the terminal state\n          collected from nowcast_data, useful in e.g. online nowcasting.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mfmodel</span><span class=\"p\">:</span> <span class=\"n\">libesn</span><span class=\"o\">.</span><span class=\"n\">mfesn</span><span class=\"o\">.</span><span class=\"n\">MFESN</span>,</span><span class=\"param\">\t<span class=\"n\">nowcast_data</span>,</span><span class=\"param\">\t<span class=\"n\">fit</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">terminal</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_states", "modulename": "libesn.mfesn_states", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.mfesn_states.mf_dt_states", "modulename": "libesn.mfesn_states", "qualname": "mf_dt_states", "kind": "function", "doc": "<p>Take multi-frequency inputs and a MFESN model and collect states\nwith optional included dates (Pandas dataframes) as a list\ninput: tuple or list of input dataframes\nmfmodel: MFESN model\ndates: optional, add datetime index to states</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">mfmodel</span>, </span><span class=\"param\"><span class=\"n\">dates</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_states.mf_dt_states_to_matrix", "modulename": "libesn.mfesn_states", "qualname": "mf_dt_states_to_matrix", "kind": "function", "doc": "<p>Reduce a list of multi-frequency states to a single matrix (Numpy)\nfor the purpose of e.g. fitting the model.\nstates: tuple or list of states, dated\nref_dates: reference dates for state stacking\nstates_join: stacking method\nstates_lags: optional, lags of state to incluse when stacking</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">states</span>, </span><span class=\"param\"><span class=\"n\">ref_dates</span>, </span><span class=\"param\"><span class=\"n\">states_join</span>, </span><span class=\"param\"><span class=\"n\">states_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.mfesn_states.mf_states", "modulename": "libesn.mfesn_states", "qualname": "mf_states", "kind": "function", "doc": "<p>Shorthand for chaining mf_dt_states() and mf_dt_states_to_matrix()\nwith dates extraction directly from inputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">mfmodel</span>, </span><span class=\"param\"><span class=\"n\">ref_dates</span>, </span><span class=\"param\"><span class=\"n\">states_join</span>, </span><span class=\"param\"><span class=\"n\">states_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs", "modulename": "libesn.ufuncs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.ufuncs.identity", "modulename": "libesn.ufuncs", "qualname": "identity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.radbas", "modulename": "libesn.ufuncs", "qualname": "radbas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.retanh", "modulename": "libesn.ufuncs", "qualname": "retanh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.softplus", "modulename": "libesn.ufuncs", "qualname": "softplus", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.vech", "modulename": "libesn.ufuncs", "qualname": "vech", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">V</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.matrh", "modulename": "libesn.ufuncs", "qualname": "matrh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">N</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.nb_identity", "modulename": "libesn.ufuncs", "qualname": "nb_identity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.nb_radbas", "modulename": "libesn.ufuncs", "qualname": "nb_radbas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.nb_retanh", "modulename": "libesn.ufuncs", "qualname": "nb_retanh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.nb_softplus", "modulename": "libesn.ufuncs", "qualname": "nb_softplus", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.nb_vech", "modulename": "libesn.ufuncs", "qualname": "nb_vech", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">V</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.ufuncs.nb_matrh", "modulename": "libesn.ufuncs", "qualname": "nb_matrh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">N</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "libesn.validation", "modulename": "libesn.validation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.__init__", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span>,</span><span class=\"param\">\t<span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">min_train_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_train_size</span><span class=\"o\">=</span><span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.length", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.test_size", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.test_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.min_train_size", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.min_train_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.max_train_size", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.max_train_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.overlap", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.overlap", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "libesn.validation.ShiftTimeSeriesSplit.split", "modulename": "libesn.validation", "qualname": "ShiftTimeSeriesSplit.split", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();